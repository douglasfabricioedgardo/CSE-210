// Author: Douglas Fabricio Ramirez
// 7/8/2023
//CSE 210
// file: Act.cs

using System;
using System.Collections.Generic;
using System.IO;

namespace InspireStone
{
    class Act : Program
    {

        // The InspireSelect method prompts the user to select from a list of inspirations generated by _inspireList (if _step is equal to 5 and the _type is not pearl). It then sets the selection as _select.
        protected override void InspireSelect()
        {
            Console.Clear();
            bool hasInspiration = false;

            // Check if there are any inspirations with step 5 and non-"pearl" type
            foreach (string inspire in _inspireList)
            {
                string[] parts = inspire.Split(new string[] { "///" }, StringSplitOptions.None);
                int step;
                string type;
                if (Int32.TryParse(parts[0], out step))
                {
                    type = parts[4];
                    if (step == 5 && type != "Pearl")
                    {
                        hasInspiration = true;
                        break;
                    }
                }
            }

            if (!hasInspiration)
            {
                TypingEffect("There are no inspirations to plan.");
                Thread.Sleep(2000);
                return;
            }

            TypingEffect("\nSelect an inspiration to Act on:");
            Console.WriteLine();
            for (int i = 0; i < _inspireList.Count; i++)
            {
                string[] parts = _inspireList[i].Split(new string[] { "///" }, StringSplitOptions.None);
                int step;
                string type;
                if (Int32.TryParse(parts[0], out step))
                {
                    type = parts[4];
                    if (step == 5 && type != "Pearl")
                    {
                        Console.WriteLine($"{i + 1}. {parts[2]}");
                    }
                }
            }
            Console.WriteLine();
            BlinkIndicator();

            string input = Console.ReadLine();
            int selection;
            if (Int32.TryParse(input, out selection))
            {
                // Check if selection is within range
                bool isValidSelection = false;
                for (int i = 0; i < _inspireList.Count; i++)
                {
                    string[] parts = _inspireList[i].Split(new string[] { "///" }, StringSplitOptions.None);
                    int step;
                    if (Int32.TryParse(parts[0], out step))
                    {
                        if (step == 5 && selection == i + 1)
                        {
                            _index = i;
                            _select = _inspireList[_index];
                            Inspire.InspireSeperate();
                            isValidSelection = true;
                            TypingEffect($"Selected inspiration: {_name}");
                            Thread.Sleep(2000);
                            break;
                        }
                    }
                }
                if (!isValidSelection)
                {
                    Console.WriteLine("Invalid input, please try again.");
                }
            }
            else
            {
                Console.WriteLine("Invalid input, please try again.");
            }
        }

        // The Acting method first calls the InspireSelect method. It then displays the selected inspiration and prompts the user to confirm if they have acted on it. If yes, it sets the inspiration's _act value to "Acted On", upgrades the step count, saves the inspiration, adds luminosity, and saves the inspire list. If no, it returns.
        public void Acting()
        {
            InspireSelect();
             if (_select == "") // check if no inspiration has been selected
            {
                return;
            }
            else
            {
                Inspire.DisplayInspiration();
                Console.ForegroundColor = ConsoleColor.Blue;
                Console.WriteLine();
                TypingEffect($"Have you acted on the Inspiration:{_name}? (y/n)");
                Console.WriteLine();
                BlinkIndicator();
                string input = Console.ReadLine();
                if (input.ToLower() == "y")
                {
                    _act = "Acted On";
                    StepUpgrade();
                    Inspire.SaveInspiration();
                    Inspire.AddLuminosity();
                    Inspire.SaveInspireList();
                }
                else
                {
                    return;
                }
            }
        }

        // The Menu method displays a menu with two options: report an inspiration as acted on or return to the main menu. If the user selects the first option, it calls the Acting method. If no inspiration has been selected, it returns. If the user selects the second option, it returns to the main menu.
        protected override void Menu()
        {

            while (true)
            {
                Console.Clear();
                // Display luminosity score
                Inspire.DisplayLuminosity();
                Console.WriteLine();
                Console.WriteLine("Select an option:");
                Console.WriteLine();
                Console.WriteLine("1. Report inspiration as Acted on");
                Console.WriteLine("2. Return to Main Menu");
                Console.WriteLine();
                BlinkIndicator();

                string input = Console.ReadLine();
                int selection;
                if (Int32.TryParse(input, out selection))
                {
                    switch (selection)
                    {
                        case 1:
                            Acting();
                            if (_select == "") // check if no inspiration has been selected
                            {
                                return;
                            }
                            break;
                        case 2:
                            return;
                        default:
                            Console.WriteLine("Invalid input, please try again.");
                            break;
                    }
                }
                else
                {
                    Console.WriteLine("Invalid input, please try again.");
                }
            } 
        }

        // The Run method calls the Menu method.
        public void Run()
        {
            Menu();
        }
    }
}