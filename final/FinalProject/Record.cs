// Author: Douglas Fabricio Ramirez
// 7/8/2023
// CSE 210
// file: Record.cs
using System;
using System.Collections.Generic;
using System.IO;

namespace InspireStone
{
    class Record : Program
    {

        // This method overrides the InspireSelect method from the Program class. It prompts the user to select an inspiration to record from the list of inspirations generated by _inspireList, only if there are inspirations with step 7. It sets the selection as _select. The method checks if there are any inspirations with step 7, and displays the list of those inspirations to the user, prompting them to select one. If the user inputs a valid selection, it sets the selection as _select and proceeds to the Recording method. If no inspiration has been selected, the method returns.
        protected override void InspireSelect()
        {
            bool hasInspiration = false;

            // Check if there are any inspirations with step 3
            foreach (string inspire in _inspireList)
            {
                string[] parts = inspire.Split(new string[] { "///" }, StringSplitOptions.None);
                int step;
                if (Int32.TryParse(parts[0], out step))
                {
                    if (step == 7)
                    {
                        hasInspiration = true;
                        break;
                    }
                }
            }

            if (!hasInspiration)
            {
                Console.WriteLine("There are no inspirations to record.");
                Thread.Sleep(2000);
                return;
            }

            TypingEffect("\nSelect an inspiration:");
            Console.WriteLine();
            for (int i = 0; i < _inspireList.Count; i++)
            {
                string[] parts = _inspireList[i].Split(new string[] { "///" }, StringSplitOptions.None);
                int step;
                if (Int32.TryParse(parts[0], out step))
                {
                    if (step == 7)
                    {
                        Console.WriteLine($"{i + 1}. {parts[2]}");
                    }
                }
            }
            Console.WriteLine();
            BlinkIndicator();

            string input = Console.ReadLine();
            int selection;
            if (Int32.TryParse(input, out selection))
            {
                // Check if selection is within range
                bool isValidSelection = false;
                for (int i = 0; i < _inspireList.Count; i++)
                {
                    string[] parts = _inspireList[i].Split(new string[] { "///" }, StringSplitOptions.None);
                    int step;
                    if (Int32.TryParse(parts[0], out step))
                    {
                        if (step == 7 && selection == i + 1)
                        {
                            _index = i;
                            _select = _inspireList[_index];
                            TypingEffect($"Selected inspiration: {_name}");
                            Thread.Sleep(2000);
                            Inspire.InspireSeperate();
                            isValidSelection = true;
                            break;
                        }
                    }
                }
                if (!isValidSelection)
                {
                    Console.WriteLine("Invalid input, please try again.");
                }
            }
            else
            {
                Console.WriteLine("Invalid input, please try again.");
            }
        }

        // This is the Recording method. It displays the inspiration that the user has selected, prompts the user to reflect on it, and save the user's input as a journal entry. It then upgrades the step, saves the inspiration, adds luminosity, and saves the inspire list. The method first displays the inspiration selected by the user, and prompts them to reflect on it and write a journal entry about their thoughts and feelings. It saves the user's input as a journal entry, upgrades the step, saves the inspiration, adds luminosity, and saves the inspire list.
        static public void Recording()
        {
            Inspire.DisplayInspiration();
            Console.ForegroundColor = ConsoleColor.White;
            Journal.SaveInspaDataToJournal();
            //Prompt the user to reflect about the inspirations, instruct the user what the purpose of a journal entry is for, and who it is for, Postarity, and why it is important.
            TypingEffect("Please take a few moments to reflect on the inspiration and your journey with it through all the steps.");
            TypingEffect("Think about what it means to you and how it relates to your life. Is it important to those who come after you?");
            TypingEffect("Then, write a journal entry about it, explaining your thoughts and feelings.");
            // save user input
            Console.WriteLine();
            BlinkIndicator();

            string journalEntry = Console.ReadLine();
            Journal.SaveToJournal(journalEntry);
            // call SaveToJournal(input)
            Program.StepUpgrade();
            Inspire.SaveInspiration();
            Inspire.AddLuminosity();
            Inspire.SaveInspireList();
        }

        // This method overrides the Menu method from the Program class. It displays the luminosity score and prompts the user to select an option: to record an inspiration or return to the main menu. The method displays the luminosity score and prompts the user to select an option: to record an inspiration or return to the main menu. If the user selects option 1, the method calls InspireSelect and Recording methods. If the user selects option 2, the method returns to the main menu. If the user inputs an invalid selection, the method prompts them to try again.
        protected override void Menu()
        {

            while (true)
            {
                Console.Clear();
                // Display luminosity score
                Inspire.DisplayLuminosity();
                Console.WriteLine();
                TypingEffect("Select an option:");
                Console.WriteLine();
                Console.WriteLine("1. Record inspirationon");
                Console.WriteLine("2. Return to Main Menu");
                Console.WriteLine();
                BlinkIndicator();

                string input = Console.ReadLine();
                int selection;
                if (Int32.TryParse(input, out selection))
                {
                    switch (selection)
                    {
                        case 1:
                            InspireSelect();
                            if (_select == "") // check if no inspiration has been selected
                            {
                                return;
                            }
                            else
                            {
                                Recording();
                            }
                            break;
                        case 2:
                            return;
                        default:
                            Console.WriteLine("Invalid input, please try again.");
                            break;
                    }
                }
                else
                {
                    Console.WriteLine("Invalid input, please try again.");
                }
            } 
        }

        // Run method calls the Menu method.
        public void Run()
        {
            Menu();
        }
    }
}